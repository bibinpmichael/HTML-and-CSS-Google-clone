/* The main class applies a top margin to the container */
.main {
  margin-top: 100px;
}

/* The logo-img class styles the image, centering it and setting its size */
.logo-img {
  display: block;
  width: 300px;
  margin-bottom: 20px;
  margin-left: auto;
  margin-right: auto;
}

/* The search-input class styles the input field, centering it and adding padding and border */
.search-input {
  display: block;
  width: 400px;
  margin-left: auto;
  margin-right: auto;
  line-height: 24px;
  padding-top: 10px;
  padding-bottom: 10px;
  padding-left: 30px;
  padding-right: 30px;
  border: 1px solid #dfe1e5;
  border-radius: 24px;
}

/* The btn-wrapper class centers the buttons horizontally */
.btn-wrapper {
  display: flex;
  justify-content: center;
}

/* The btn class styles the buttons, adding margin, padding, background color, and font size */
.btn {
  margin-left: 4px;
  margin-right: 4px;
  margin-top: 30px;
  background: #dfe1e5;
  border: none;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 16px;
  padding-right: 16px;
  border-radius: 4px;
  font-size: 14px;
}

/* 
The CSS code provided styles the HTML elements to closely resemble the Google search page. Let's examine each selector and its properties in detail:

.main: This class selector targets the main container div. By setting margin-top: 100px;, we push the entire content block 100 pixels down from the top of the page. This creates white space above the logo, mimicking the Google search page's layout and improving the overall visual balance of the page.

.logo-img: This selector styles the Google logo image. Several properties work together to position and size the logo:

        display: block; changes the image's display property from its default inline behavior to block. This allows us to use margin properties effectively.
        width: 300px; sets a fixed width for the logo, ensuring it's appropriately sized regardless of the original image dimensions.
        margin-bottom: 20px; adds space between the logo and the search input below it.
        margin-left: auto; and margin-right: auto; work together to center the logo horizontally. This technique works because we've set the display to block and specified a width.


.search-input: This selector targets the search input field, styling it to resemble Google's search bar:

        display: block; and margin-left: auto; and margin-right: auto; are used again to center the input field horizontally.
        width: 400px; sets a fixed width for the search bar.
        line-height: 24px; helps to vertically center the text within the input field.
        The various padding properties create space inside the input field, making it more visually appealing and easier to use.
        border: 1px solid #dfe1e5; creates a subtle border around the input field.
        border-radius: 24px; rounds the corners of the input field, matching Google's design.


.btn-wrapper: This selector styles the container for the two buttons:

        display: flex; enables flexbox layout for this container.
        justify-content: center; centers the buttons horizontally within the flex container.


.btn: This selector styles both buttons identically:

        margin properties add space around each button.
        background: #dfe1e5; sets a light gray background color.
        border: none; removes the default button border.
        padding properties add space inside the buttons, making them larger and easier to click.
        border-radius: 4px; slightly rounds the corners of the buttons.
        font-size: 14px; sets the text size within the buttons.



By combining these HTML elements and CSS styles, we create a simplified yet recognizable clone of the Google search page. The layout is centered and spaced to provide a clean, user-friendly interface that focuses on the core functionality of search.
This code demonstrates several important web development concepts:

Semantic HTML: Using appropriate tags like <input> for the search bar and <button> for clickable elements improves accessibility and SEO.
CSS Box Model: The extensive use of margin and padding properties showcases how the CSS box model is used to create space around and within elements.

Flexbox: The use of display: flex; and justify-content: center; on the button wrapper demonstrates a modern approach to centering content horizontally.

Responsive Design: While this example doesn't include media queries, the use of percentage-based widths and auto margins allows for some degree of responsiveness.

CSS Specificity: The code uses class selectors consistently, which have higher specificity than element selectors, allowing for more targeted styling.
*/
